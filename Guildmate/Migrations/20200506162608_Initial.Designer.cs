// <auto-generated />
using System;
using Guildmate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Guildmate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200506162608_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Guildmate.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "953c627f-02a4-4f57-810c-785e1e774b91",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJvA6s+gpEGVkL2/hL479fm8U3RW7Vmj6dySEKZp7eRNAQ+yO2viH4ushBpuGC+g7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.BankItem", b =>
                {
                    b.Property<int>("BankItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("BankItemId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GuildId");

                    b.HasIndex("ItemId");

                    b.ToTable("BankItem");

                    b.HasData(
                        new
                        {
                            BankItemId = 1,
                            CharacterId = 1,
                            ItemId = 1
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClassRaceId")
                        .HasColumnType("int");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int?>("InventorySpace")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClassRaceId");

                    b.HasIndex("GuildId");

                    b.HasIndex("RankId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            ClassRaceId = 1,
                            GuildId = 1,
                            Name = "Testtoon",
                            RankId = 1
                        });
                });

            modelBuilder.Entity("Guildmate.Models.CharacterEvent", b =>
                {
                    b.Property<int>("CharacterEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("CharacterEventId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleId");

                    b.ToTable("CharacterEvent");

                    b.HasData(
                        new
                        {
                            CharacterEventId = 1,
                            CharacterId = 1,
                            EventId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            Color = "Orange",
                            Name = "Druid"
                        },
                        new
                        {
                            ClassId = 2,
                            Color = "Green",
                            Name = "Hunter"
                        },
                        new
                        {
                            ClassId = 3,
                            Color = "Light Blue",
                            Name = "Mage"
                        },
                        new
                        {
                            ClassId = 4,
                            Color = "Pink",
                            Name = "Paladin"
                        },
                        new
                        {
                            ClassId = 5,
                            Color = "White",
                            Name = "Priest"
                        },
                        new
                        {
                            ClassId = 6,
                            Color = "Yellow",
                            Name = "Rogue"
                        },
                        new
                        {
                            ClassId = 7,
                            Color = "Blue",
                            Name = "Shaman"
                        },
                        new
                        {
                            ClassId = 8,
                            Color = "Purple",
                            Name = "Warlock"
                        },
                        new
                        {
                            ClassId = 9,
                            Color = "Light Brown",
                            Name = "Warrior"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.ClassRace", b =>
                {
                    b.Property<int>("ClassRaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("ClassRaceId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("ClassRace");

                    b.HasData(
                        new
                        {
                            ClassRaceId = 1,
                            ClassId = 9,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 2,
                            ClassId = 6,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 3,
                            ClassId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 4,
                            ClassId = 4,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 5,
                            ClassId = 3,
                            RaceId = 4
                        },
                        new
                        {
                            ClassRaceId = 6,
                            ClassId = 5,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 7,
                            ClassId = 8,
                            RaceId = 1
                        },
                        new
                        {
                            ClassRaceId = 8,
                            ClassId = 9,
                            RaceId = 2
                        },
                        new
                        {
                            ClassRaceId = 9,
                            ClassId = 6,
                            RaceId = 2
                        },
                        new
                        {
                            ClassRaceId = 10,
                            ClassId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            ClassRaceId = 11,
                            ClassId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            ClassRaceId = 12,
                            ClassId = 5,
                            RaceId = 2
                        },
                        new
                        {
                            ClassRaceId = 13,
                            ClassId = 9,
                            RaceId = 3
                        },
                        new
                        {
                            ClassRaceId = 14,
                            ClassId = 6,
                            RaceId = 3
                        },
                        new
                        {
                            ClassRaceId = 15,
                            ClassId = 2,
                            RaceId = 3
                        },
                        new
                        {
                            ClassRaceId = 16,
                            ClassId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            ClassRaceId = 17,
                            ClassId = 5,
                            RaceId = 3
                        },
                        new
                        {
                            ClassRaceId = 18,
                            ClassId = 9,
                            RaceId = 4
                        },
                        new
                        {
                            ClassRaceId = 19,
                            ClassId = 6,
                            RaceId = 4
                        },
                        new
                        {
                            ClassRaceId = 20,
                            ClassId = 8,
                            RaceId = 4
                        },
                        new
                        {
                            ClassRaceId = 21,
                            ClassId = 9,
                            RaceId = 5
                        },
                        new
                        {
                            ClassRaceId = 22,
                            ClassId = 6,
                            RaceId = 5
                        },
                        new
                        {
                            ClassRaceId = 23,
                            ClassId = 5,
                            RaceId = 5
                        },
                        new
                        {
                            ClassRaceId = 24,
                            ClassId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            ClassRaceId = 25,
                            ClassId = 8,
                            RaceId = 5
                        },
                        new
                        {
                            ClassRaceId = 26,
                            ClassId = 9,
                            RaceId = 6
                        },
                        new
                        {
                            ClassRaceId = 27,
                            ClassId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            ClassRaceId = 28,
                            ClassId = 7,
                            RaceId = 6
                        },
                        new
                        {
                            ClassRaceId = 29,
                            ClassId = 1,
                            RaceId = 6
                        },
                        new
                        {
                            ClassRaceId = 30,
                            ClassId = 2,
                            RaceId = 7
                        },
                        new
                        {
                            ClassRaceId = 31,
                            ClassId = 9,
                            RaceId = 7
                        },
                        new
                        {
                            ClassRaceId = 32,
                            ClassId = 6,
                            RaceId = 7
                        },
                        new
                        {
                            ClassRaceId = 33,
                            ClassId = 7,
                            RaceId = 7
                        },
                        new
                        {
                            ClassRaceId = 34,
                            ClassId = 8,
                            RaceId = 7
                        },
                        new
                        {
                            ClassRaceId = 35,
                            ClassId = 7,
                            RaceId = 8
                        },
                        new
                        {
                            ClassRaceId = 36,
                            ClassId = 9,
                            RaceId = 8
                        },
                        new
                        {
                            ClassRaceId = 37,
                            ClassId = 6,
                            RaceId = 8
                        },
                        new
                        {
                            ClassRaceId = 38,
                            ClassId = 5,
                            RaceId = 8
                        },
                        new
                        {
                            ClassRaceId = 39,
                            ClassId = 2,
                            RaceId = 8
                        },
                        new
                        {
                            ClassRaceId = 40,
                            ClassId = 3,
                            RaceId = 8
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("GuildId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            GuildId = 1,
                            MaxAttendees = 40,
                            Name = "Test Event",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Faction", b =>
                {
                    b.Property<int>("FactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactionId");

                    b.ToTable("Faction");

                    b.HasData(
                        new
                        {
                            FactionId = 1,
                            Name = "Alliance"
                        },
                        new
                        {
                            FactionId = 2,
                            Name = "Horde"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Guild", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("GuildId");

                    b.HasIndex("FactionId");

                    b.HasIndex("ServerId");

                    b.ToTable("Guild");

                    b.HasData(
                        new
                        {
                            GuildId = 1,
                            FactionId = 1,
                            Name = "Test Guild",
                            ServerId = 1
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemTypeId = 2,
                            Name = "Linen Cloth",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Guildmate.Models.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemType");

                    b.HasData(
                        new
                        {
                            ItemTypeId = 1,
                            Name = "Herb"
                        },
                        new
                        {
                            ItemTypeId = 2,
                            Name = "Cloth"
                        },
                        new
                        {
                            ItemTypeId = 3,
                            Name = "Ore"
                        },
                        new
                        {
                            ItemTypeId = 4,
                            Name = "Enchanting"
                        },
                        new
                        {
                            ItemTypeId = 5,
                            Name = "Armor"
                        },
                        new
                        {
                            ItemTypeId = 7,
                            Name = "Weapon"
                        },
                        new
                        {
                            ItemTypeId = 8,
                            Name = "Misc"
                        },
                        new
                        {
                            ItemTypeId = 9,
                            Name = "Food"
                        },
                        new
                        {
                            ItemTypeId = 10,
                            Name = "Currency"
                        },
                        new
                        {
                            ItemTypeId = 11,
                            Name = "Container"
                        },
                        new
                        {
                            ItemTypeId = 12,
                            Name = "Crafting Material"
                        },
                        new
                        {
                            ItemTypeId = 13,
                            Name = "Reputation"
                        },
                        new
                        {
                            ItemTypeId = 14,
                            Name = "Crafted Item"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.HasIndex("FactionId");

                    b.ToTable("Race");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            FactionId = 1,
                            Name = "Human"
                        },
                        new
                        {
                            RaceId = 2,
                            FactionId = 1,
                            Name = "Dwarf"
                        },
                        new
                        {
                            RaceId = 3,
                            FactionId = 1,
                            Name = "Night Elf"
                        },
                        new
                        {
                            RaceId = 4,
                            FactionId = 1,
                            Name = "Gnome"
                        },
                        new
                        {
                            RaceId = 5,
                            FactionId = 2,
                            Name = "Undead"
                        },
                        new
                        {
                            RaceId = 6,
                            FactionId = 2,
                            Name = "Tauren"
                        },
                        new
                        {
                            RaceId = 7,
                            FactionId = 2,
                            Name = "Orc"
                        },
                        new
                        {
                            RaceId = 8,
                            FactionId = 2,
                            Name = "Troll"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Permissions")
                        .HasColumnType("bit");

                    b.HasKey("RankId");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            RankId = 1,
                            Name = "Guild Master",
                            Permissions = true
                        },
                        new
                        {
                            RankId = 2,
                            Name = "Member",
                            Permissions = false
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Name = "US East"
                        },
                        new
                        {
                            RegionId = 2,
                            Name = "US West"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterEventId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.HasIndex("CharacterEventId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Tank"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "DPS"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Healer"
                        });
                });

            modelBuilder.Entity("Guildmate.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("ServerId");

                    b.HasIndex("RegionId");

                    b.ToTable("Server");

                    b.HasData(
                        new
                        {
                            ServerId = 1,
                            Name = "Incendius",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 2,
                            Name = "Faerlina",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 3,
                            Name = "Bloodsail Buccaneers",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 4,
                            Name = "Westfall",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 5,
                            Name = "Deviate Delight",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 6,
                            Name = "Benediction",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 7,
                            Name = "Ashkandi",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 8,
                            Name = "Heartseeker",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 9,
                            Name = "Kirtonos",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 10,
                            Name = "Skeram",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 11,
                            Name = "Stalagg",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 12,
                            Name = "Thalnos",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 13,
                            Name = "Windseeker",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 14,
                            Name = "Earthfury",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 15,
                            Name = "Kromcrush",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 16,
                            Name = "Mankrik",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 17,
                            Name = "Netherwind",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 18,
                            Name = "Herod",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 19,
                            Name = "Pagle",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 20,
                            Name = "Sulfuras",
                            RegionId = 1
                        },
                        new
                        {
                            ServerId = 21,
                            Name = "Kurinnaxx",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 22,
                            Name = "Whitemane",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 23,
                            Name = "Anathema",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 24,
                            Name = "Arcanite Reaper",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 25,
                            Name = "Azuresong",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 26,
                            Name = "Myzrael",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 27,
                            Name = "Old Blanchy",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 28,
                            Name = "Smolderweb",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 29,
                            Name = "Atiesh",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 30,
                            Name = "Bigglesworth",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 31,
                            Name = "Blaumeux",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 32,
                            Name = "Rattlegore",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 33,
                            Name = "Thunderfury",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 34,
                            Name = "Fairbanks",
                            RegionId = 2
                        },
                        new
                        {
                            ServerId = 35,
                            Name = "Grobbulus",
                            RegionId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Guildmate.Models.BankItem", b =>
                {
                    b.HasOne("Guildmate.Models.Character", "Character")
                        .WithMany("BankItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.Guild", null)
                        .WithMany("BankItems")
                        .HasForeignKey("GuildId");

                    b.HasOne("Guildmate.Models.Item", "Item")
                        .WithMany("BankItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Character", b =>
                {
                    b.HasOne("Guildmate.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Characters")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Guildmate.Models.ClassRace", "ClassRace")
                        .WithMany()
                        .HasForeignKey("ClassRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.Guild", "Guild")
                        .WithMany("Characters")
                        .HasForeignKey("GuildId");

                    b.HasOne("Guildmate.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");
                });

            modelBuilder.Entity("Guildmate.Models.CharacterEvent", b =>
                {
                    b.HasOne("Guildmate.Models.Character", "Character")
                        .WithMany("CharacterEvents")
                        .HasForeignKey("CharacterId");

                    b.HasOne("Guildmate.Models.Event", "Event")
                        .WithMany("CharacterEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.ClassRace", b =>
                {
                    b.HasOne("Guildmate.Models.Class", "Class")
                        .WithMany("ClassRaces")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.Race", "Race")
                        .WithMany("ClassRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Event", b =>
                {
                    b.HasOne("Guildmate.Models.Guild", "Guild")
                        .WithMany("Events")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Guild", b =>
                {
                    b.HasOne("Guildmate.Models.Faction", "Faction")
                        .WithMany("Guilds")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Item", b =>
                {
                    b.HasOne("Guildmate.Models.Character", null)
                        .WithMany("Items")
                        .HasForeignKey("CharacterId");

                    b.HasOne("Guildmate.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Race", b =>
                {
                    b.HasOne("Guildmate.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guildmate.Models.Role", b =>
                {
                    b.HasOne("Guildmate.Models.CharacterEvent", null)
                        .WithMany("Roles")
                        .HasForeignKey("CharacterEventId");
                });

            modelBuilder.Entity("Guildmate.Models.Server", b =>
                {
                    b.HasOne("Guildmate.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Guildmate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Guildmate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guildmate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Guildmate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
